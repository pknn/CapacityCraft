name: label

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled, unlabeled]

jobs:
  check-automerge-label:
    runs-on: ubuntu-latest
    outputs:
      has-automerge: ${{ steps.check-label.outputs.has-automerge }}
      pr-number: ${{ steps.get-pr-number.outputs.number }}
    steps:
      - name: Get PR number
        id: get-pr-number
        run: echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT

      - name: Check for Automerge label
        id: check-label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
        run: |
          labels=$(gh api repos/$REPO/issues/$PR_NUMBER/labels --jq '.[].name')
          if echo "$labels" | grep -q "^Automerge$"; then
            echo "has-automerge=true" >> $GITHUB_OUTPUT
            echo "✅ Automerge label is present"
            exit 0
          else
            echo "has-automerge=false" >> $GITHUB_OUTPUT
            echo "❌ Automerge label is missing"
            exit 1
          fi

  auto-merge:
    needs: check-automerge-label
    if: needs.check-automerge-label.outputs.has-automerge == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Enable auto-merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ needs.check-automerge-label.outputs.pr-number }}
          REPO: ${{ github.repository }}
        run: |
          # Check if PR is mergeable
          pr_data=$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '{mergeable: .mergeable, state: .state, merged: .merged}')
          mergeable=$(echo $pr_data | jq -r '.mergeable')
          state=$(echo $pr_data | jq -r '.state')
          merged=$(echo $pr_data | jq -r '.merged')

          if [ "$state" != "open" ]; then
            echo "❌ PR is not open (state: $state)"
            exit 1
          fi

          if [ "$merged" == "true" ]; then
            echo "ℹ️ PR is already merged"
            exit 0
          fi

          if [ "$mergeable" != "true" ]; then
            echo "❌ PR is not mergeable (conflicts need to be resolved)"
            exit 1
          fi

          # Check if required checks have passed
          checks=$(gh api repos/$REPO/commits/$(gh api repos/$REPO/pulls/$PR_NUMBER --jq '.head.sha')/check-runs --jq '.check_runs[] | {name: .name, conclusion: .conclusion}')
          if [ -z "$checks" ]; then
            echo "⚠️ No checks found, waiting for checks to complete"
            exit 1
          fi

          failed_checks=$(echo "$checks" | jq -r 'select(.conclusion != "success" and .conclusion != null) | .name')
          if [ ! -z "$failed_checks" ]; then
            echo "❌ Some checks failed or are pending:"
            echo "$failed_checks"
            exit 1
          fi

          # Enable auto-merge
          echo "✅ Enabling auto-merge for PR #$PR_NUMBER"
          gh pr merge $PR_NUMBER --auto --merge --delete-branch
